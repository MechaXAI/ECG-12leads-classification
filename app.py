# -*- coding: utf-8 -*-
"""app2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l6R2rOIV1hDyBR7Z6uVUza_0kHJ_qRgC
"""

import streamlit as st
import numpy as np
import neurokit2 as nk
import matplotlib.pyplot as plt
from scipy.io import loadmat
import wfdb
import os
import zipfile
from tempfile import NamedTemporaryFile
import tkinter as tk
from tkinter import filedialog

# ------------------------ PRIMERA FUNCIÓN ------------------------

def calculate_heart_rate(signal):
    # Detectar los picos R usando nk.ecg_peaks
    r_peaks = nk.ecg_peaks(signal)

    # Extraer los índices de los picos R
    r_peak_indices = r_peaks[1]['ECG_R_Peaks']

    # Calcular los intervalos RR (tiempo entre los picos R)
    rr_intervals = np.diff(r_peak_indices) / 1000  # Convertir de ms a segundos

    # Calcular la frecuencia cardíaca (lpm)
    heart_rate = 60 / rr_intervals.mean()  # Promedio de la frecuencia
    return heart_rate, r_peaks

def graficos(uploaded_hea_file, uploaded_mat_file):
    st.title("Análisis de ECG desde Archivos Individuos")

    if uploaded_hea_file is not None and uploaded_mat_file is not None:
        try:
            # Guardar temporalmente el archivo .hea
            with NamedTemporaryFile(delete=False, suffix='.hea') as temp_hea_file:
                temp_hea_file.write(uploaded_hea_file.read())
                temp_hea_file.close()  # Cerrar el archivo para que pueda ser leído

            # Guardar temporalmente el archivo .mat
            with NamedTemporaryFile(delete=False, suffix='.mat') as temp_mat_file:
                temp_mat_file.write(uploaded_mat_file.read())
                temp_mat_file.close()  # Cerrar el archivo para que pueda ser leído

            # Leer el archivo .mat usando scipy.io.loadmat
            mat_data = loadmat(temp_mat_file.name)
        
            # Inspeccionar las variables en el archivo .mat
            st.write("### Variables en el archivo .mat:")
            st.write(mat_data.keys())  # Mostrar las claves del archivo .mat
            
            # Acceder a la variable 'val' que contiene los datos
            signal_array = mat_data['val']  # Cambiar 'val' si es necesario
            
            # Si hay múltiples señales, seleccionamos la primera
            if isinstance(signal_array, np.ndarray):
                signal_array = signal_array[0]  # Tomar solo la primera señal si hay más de una

            # Mostrar la señal de ECG
            st.write("### Señal de ECG (Primeros 1000 puntos)")
            st.line_chart(signal_array[:1000])  # Mostrar las primeras 1000 muestras

            # Calcular la frecuencia cardíaca
            heart_rate, r_peaks = calculate_heart_rate(signal_array)
        
            # Mostrar la frecuencia cardíaca
            st.write(f"### Frecuencia Cardíaca Promedio: {heart_rate:.2f} lpm")

            # Alerta de frecuencia cardíaca fuera del rango
            if heart_rate < 60 or heart_rate > 100:
                st.warning(f"**ALERTA**: La frecuencia cardíaca está fuera del rango normal (60-100 lpm): {heart_rate:.2f} lpm")
            else:
                st.success(f"La frecuencia cardíaca está dentro del rango normal: {heart_rate:.2f} lpm")

            # Visualización de los picos R
            st.write("### Visualización de los Picos R")
            plt.figure(figsize=(12, 6))  # Cambiado el tamaño de la figura
            plt.plot(signal_array, label="Señal ECG", color="#1f77b4")  # Cambié el color de la señal ECG
            plt.scatter(r_peaks[1]['ECG_R_Peaks'], signal_array[r_peaks[1]['ECG_R_Peaks']], color='r', label='Picos R', s=50)  # Ajusté el tamaño y color de los picos R
            plt.title("Señal ECG con Picos R", fontsize=14)  # Título más grande
            plt.xlabel("Tiempo (segundos)", fontsize=12)  # Tamaño de fuente en las etiquetas
            plt.ylabel("Amplitud", fontsize=12)  # Tamaño de fuente en las etiquetas
            plt.legend()
            plt.grid(True, which='both', linestyle='--', linewidth=0.5)  # Cambié el estilo y grosor de la cuadrícula
            st.pyplot(plt)

        except Exception as e:
            st.error(f"Error al leer el archivo .mat o .hea de ECG: {e}")
            st.stop()


# ------------------------ SEGUNDA FUNCIÓN ------------------------

def visualizacion_dataset():
    st.title("Visualización de ECG desde Dataset")

    st.write("### Selección de la carpeta del dataset descomprimido")

    # Ingreso manual de la ruta
    extract_path = st.text_input(
        "Ruta de la carpeta descomprimida",
        placeholder="Ej: C:/Users/Usuario/Downloads/dataset"
    )
    
    # Verificar si la ruta existe
    if extract_path and st.button("Verificar Directorio"):
        if os.path.exists(extract_path):
            st.success(f"✅ Directorio encontrado: {extract_path}")
        else:
            st.error(f"❌ El directorio no existe: {extract_path}")

    # Solo continuar si la ruta existe
    if extract_path and os.path.exists(extract_path):
        # Buscar automáticamente la subcarpeta WFDBRecords
        download_dir = None
        for root, dirs, files in os.walk(extract_path):
            if "WFDBRecords" in dirs:
                download_dir = os.path.join(root, "WFDBRecords")
                break

        if not download_dir:
            st.error("No se encontró la subcarpeta 'WFDBRecords'. Verifica la estructura del dataset.")
            return

        # Obtener los archivos de pacientes
        pacientes_dict = {}
        for root, _, files in os.walk(download_dir):
            for file in files:
                if file.endswith(".hea"):
                    record_id = os.path.splitext(file)[0]
                    patient_number = record_id.replace("JS", "")
                    relative_path = os.path.relpath(root, download_dir)
                    pacientes_dict[int(patient_number)] = os.path.join(relative_path, record_id)

        pacientes_lista = sorted(pacientes_dict.keys())

        if pacientes_lista:
            # Selección de paciente y derivación
            paciente = st.selectbox("Selecciona un paciente", pacientes_lista)
            derivada_index = st.slider("Derivación (0-11)", 0, 11, 0)

            if st.button("Mostrar ECG"):
                record_path = os.path.join(download_dir, pacientes_dict[paciente])
                record = wfdb.rdrecord(record_path)
                signal_array = np.array(record.p_signal)
                fs = record.fs

                duracion = 10
                n_muestras = int(duracion * fs)
                tiempo = np.linspace(0, duracion, n_muestras)
                señal = signal_array[:n_muestras, derivada_index]

                # Mostrar el gráfico ECG
                st.write("### Gráfico del ECG")
                fig, ax = plt.subplots(figsize=(25, 16))

                # Líneas de referencia
                for x in np.arange(0, duracion, 0.04):
                    ax.axvline(x=x, color="lightgray", linewidth=0.5)
                for y in np.arange(-2, 2, 0.1):
                    ax.axhline(y=y, color="lightgray", linewidth=0.5)

                for x in np.arange(0, duracion, 0.2):
                    ax.axvline(x=x, color="red", linewidth=1)
                for y in np.arange(-2, 2, 0.5):
                    ax.axhline(y=y, color="red", linewidth=1)

                ax.plot(tiempo, señal, color='black', linewidth=1.5)
                ax.set_title(f"ECG Paciente {paciente} - Derivación {derivada_index}", fontsize=16)
                ax.set_xlabel("Tiempo (s)", fontsize=14)
                ax.set_ylabel("Voltaje (mV)", fontsize=14)
                ax.set_xlim(0, duracion)
                ax.set_ylim(np.min(señal) - 0.3, np.max(señal) + 0.3)
                ax.set_aspect(4 / 2)
                ax.grid(False)
                st.pyplot(fig)
        else:
            st.error("No se encontraron archivos .hea en el directorio.")

# ------------------------ MAIN STREAMLIT APP ------------------------

def main():

    st.set_page_config(page_title="ECG Analyzer", page_icon="❤️", layout="wide")

    st.markdown(
        """
        <style>
        .stApp {
            background-color: #e6f2ff; /* Color celeste clarito */
        }
        .css-1d391kg {  /* Sidebar */
            background-color: #f0f2f6 !important;
        }
        h1 {
            color: #ff4b4b; /* Color de los títulos */
        }
        .stButton>button {
            background-color: #ff4b4b;
            color: white;
        }
        </style>
        """,
        unsafe_allow_html=True
    )
    st.title("ECG Analyzer App")

    st.write("Una herramienta intuitiva y eficaz para visualizar y analizar datos de ECG. Esta aplicación facilita el proceso de cargar y explorar datasets de ECG, permitiendo a los usuarios obtener insights rápidos y precisos. Perfecta tanto para profesionales de la salud como para investigadores, proporcionando una interfaz fácil de usar y funciones útiles para la manipulación de grandes volúmenes de datos médicos.")

    # Reordenar las opciones en el sidebar
    app_selection = st.sidebar.radio("Selecciona Módulo", ("Visualizar Dataset Completo", "Subir Archivos Individuales"))

    if app_selection == "Subir Archivos Individuales":
        st.sidebar.title("Subir archivos de ECG")
        uploaded_hea_file = st.sidebar.file_uploader("Cargar archivo .hea", type=["hea"])
        uploaded_mat_file = st.sidebar.file_uploader("Cargar archivo .mat", type=["mat"])
        graficos(uploaded_hea_file, uploaded_mat_file)

    elif app_selection == "Visualizar Dataset Completo":
        visualizacion_dataset()
        
if __name__ == "__main__":
    main()